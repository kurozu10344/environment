scriptencoding utf-8

set nocompatible
set number
set ruler
set hlsearch
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,euc-jp,iso-2022-jp,cp932,utf-16,utf-16le
set backspace=indent,eol,start
set nrformats=
set visualbell t_vb=
syntax on

" 長い行は折り返し表示
set wrap

" Indent
set autoindent
set cindent
set expandtab
set tabstop=4
set shiftwidth=4

" Temprary file
set nobackup
set nowritebackup
set noswapfile
set noundofile
" set viminfo=

" 小文字のみで入力の場合 -> 大文字小文字を区別しない
" 大文字混在で入力の場合 -> 大文字小文字を区別する
set ignorecase
set smartcase

" conceal無効
set conceallevel=0

" 自動改行をしない
set textwidth=0
" Kaoriya版MacVimのtextwidth対策
augroup vimrc-textwidth-kaoriya
    autocmd!
    autocmd FileType text setlocal textwidth=0
augroup END

" yankしたテキストをクリップボードに入れる
" set clipboard+=unnamed

""""""""""""""""""""""""""""""""""""""""
" path
"

" path にパスを追加する
function! s:add_path(path)
    let full_path = escape(expand(a:path), ' ')
    if isdirectory(full_path)
        execute 'set path+=' . full_path
    endif
endfunction

call s:add_path('/usr/local/include')
call s:add_path('~/include')


" $PATH にパスを追加する
function! s:add_PATH(path)
    let full_path = escape(expand(a:path), ' ')
    if isdirectory(full_path)
        let $PATH = full_path . ':' . $PATH
    endif
endfunction

call s:add_PATH('/usr/local/bin')
call s:add_PATH('~/bin')
call s:add_PATH('~/.local/bin')
" call s:add_PATH('~/Library/Haskell/bin')
" call s:add_PATH('~/.cabal/bin')
" ghc-mod from source
" call s:add_PATH('~/src/ghc-mod/dist/build/ghc-mod')
" call s:add_PATH('~/src/ghc-mod/dist/build/ghc-modi')
""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""
" NeoBundle設定
"
set nocompatible
filetype off
if has('vim_starting')
    set rtp+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc', {
            \ 'build' : {
            \     'cygwin' : 'make -f make_cygwin.mak',
            \     'mac' : 'make -f make_mac.mak',
            \     'unix' : 'make -f make_unix.mak',
            \    },
            \ }
NeoBundle 'Shougo/neocomplete', {
            \ 'depends' : 'Shougo/vimproc',
            \ }
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
" NeoBundle 'tyru/caw.vim'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'thinca/vim-ref'
NeoBundle 'kana/vim-altr'
NeoBundle 'tpope/vim-surround'
NeoBundle 'osyo-manga/shabadou.vim'
NeoBundle 'osyo-manga/vim-watchdogs', {'depends' : ['Shougo/vimproc', 'thinca/vim-quickrun'] }
NeoBundle 'jceb/vim-hier'

" Unite
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/unite-outline'
NeoBundle 'tsukkee/unite-tag'

" Git
NeoBundle 'tpope/vim-fugitive'

" Colorscheme
" NeoBundle 'tomasr/molokai'
" NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'altercation/vim-colors-solarized'

" Lazy
" NeoBundleLazy 'Shougo/unite.vim', {
"             \ 'autoload' : { 'commands' : ['Unite'] },
"             \ }
" NeoBundleLazy 'Shougo/neomru.vim', {
"             \ 'depends' : 'Shougo/unite.vim',
"             \ 'autoload' : { 'commands' : ['Unite'] },
"             \ }
" NeoBundleLazy 'Shougo/unite-outline', {
"             \ 'depends' : 'Shougo/unite.vim',
"             \ 'autoload' : { 'commands' : ['Unite'] },
"             \ }
" NeoBundleLazy 'tsukkee/unite-tag', {
"             \ 'depends' : 'Shougo/unite.vim',
"             \ 'autoload' : { 'commands' : ['Unite'] },
"             \ }
NeoBundleLazy 'Shougo/vimshell', {
            \ 'depends' : 'Shougo/vimproc',
            \ 'autoload' : { 'commands' : ['VimShell', 'VimShellCreate'] }
            \ }
NeoBundleLazy 'Shougo/vimfiler', {
            \ 'depends' : 'Shougo/unite.vim',
            \ 'autoload' : { 'commands' : ['VimFiler', 'VimFilerCurrentDir'] }
            \ }

" C++
NeoBundleLazy 'vim-jp/vim-cpp',                     {'autoload' : { 'filetypes' :['cpp'] }}
NeoBundleLazy 'octol/vim-cpp-enhanced-highlight',   {'autoload' : { 'filetypes' :['cpp'] }}
NeoBundleLazy 'osyo-manga/vim-marching',            {'autoload' : { 'filetypes' :['cpp'] }}

" Perl
NeoBundleLazy 'vim-perl/vim-perl',          {'autoload' : { 'filetypes' :['perl'] }}
NeoBundleLazy 'hotchpotch/perldoc-vim',     {'autoload' : { 'filetypes' :['perl'] }}
NeoBundleLazy 'c9s/perlomni.vim',           {'autoload' : { 'filetypes' :['perl'] }}

" Python
NeoBundleLazy 'davidhalter/jedi-vim', {
            \ 'autoload' : { 'filetypes' :['python', 'python3', 'djangohtml'] }
            \   , 'build': { 'others': 'git submodule update --init' }
            \}
" NeoBundleLazy 'lambdalisue/vim-pyenv',      {'autoload' : { 'filetypes' :['python', 'python3', 'djangohtml'] }, 'depends' : ['davidhalter/jedi-vim']}
NeoBundleLazy 'hynek/vim-python-pep8-indent',    {'autoload' : { 'filetypes' :['python', 'python3', 'djangohtml'] }}

" HTML/Javascript
NeoBundleLazy 'mattn/emmet-vim',            {'autoload' : { 'filetypes' :['html'] }}
NeoBundleLazy 'othree/html5.vim',           {'autoload' : { 'filetypes' :['html'] }}
NeoBundleLazy 'pangloss/vim-javascript',    {'autoload' : { 'filetypes' :['javascript'] }}
" NeoBundleLazy 'hail2u/vim-css3-syntax',        {'autoload' : { 'filetypes' :['css'] }}
if executable('node') && executable('npm')
    NeoBundleLazy 'marijnh/tern_for_vim', {
                \ 'autoload' : { 'filetypes' : ['javascript'] }
                \ , 'build': { 'others': 'npm install' }
                \ }
endif

" Haskell
" NeoBundleLazy 'kana/vim-filetype-haskell',    {'autoload' : { 'filetypes' : ["haskell"] }}
NeoBundleLazy 'dag/vim2hs',                     {'autoload' : { 'filetypes' : ['haskell'] }}
NeoBundleLazy 'eagletmt/neco-ghc',              {'autoload' : { 'filetypes' : ['haskell'] }, 'external_commands' : 'ghc-mod'}
NeoBundleLazy 'eagletmt/ghcmod-vim',            {'autoload' : { 'filetypes' : ['haskell'] }, 'external_commands' : 'ghc-mod'}
NeoBundleLazy 'eagletmt/unite-haddock',         {'autoload' : { 'filetypes' : ['haskell'] }}
NeoBundleLazy 'ujihisa/unite-haskellimport',    {'autoload' : { 'filetypes' : ['haskell'] }}
" NeoBundleLazy 'ujihisa/ref-hoogle',        {'autoload' : { 'filetypes' : ['haskell'] }}
" NeoBundleLazy 'lukerandall/haskellmode-vim',    {'autoload' : { 'filetypes' : ['haskell'] }}

" Swift
NeoBundleLazy 'keith/swift.vim', {'autoload' : { 'filetypes' : ['swift'] }}

" PowerShell
NeoBundleLazy 'PProvost/vim-ps1', {'autoload' : { 'filetypes' : ['ps1'] }}

" gradle
NeoBundle 'tfnico/vim-gradle'

" PlantUML
NeoBundle 'aklt/plantuml-syntax'

call neobundle#end()
filetype plugin indent on
" NeoBundleCheck
""""""""""""""""""""""""""""""""""""""""

" '%'拡張プラグイン
source $VIMRUNTIME/macros/matchit.vim

""""""""""""""""""""""""""""""""""""""""
" filetype追加
"
augroup vimrc-filetypes
    autocmd!
    autocmd BufWinEnter,BufNewFile SConstruct set filetype=python
    autocmd BufWinEnter,BufNewFile SConscript set filetype=python
    autocmd BufWinEnter,BufNewFile *.ps1 set filetype=ps1
    autocmd BufNewFile,BufRead *.pu,*.uml,*.plantuml set filetype=plantuml
augroup END
""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""
" 汎用キーマッピング
"
" 挿入モードでのカーソル移動
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-h> <Left>
inoremap <C-l> <Right>

" 行頭・行末に移動
nnoremap <Space>h 0
vnoremap <Space>h 0
nnoremap <Space>l $
vnoremap <Space>l $

" "0レジスタから貼付け
nnoremap <Space>p "0p
vnoremap <Space>p "0p

" tagsジャンプの時に複数ある時は一覧表示                                        
nnoremap <C-]> g<C-]> 

" 選択範囲を * で検索
vnoremap * "zy:let @/ = @z<CR>n
""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""
" 汎用コマンド
"
command! CdCurrent lcd %:p:h
command! Rc :e ~/.vimrc
command! Fi :VimFilerCurrentDir -create -explorer
command! Sh :VimShellCreate
command! Hex :%!xxd -g 1
command! HexReverse :%!xxd -r

" :vimgrep xxx ** と同様
" command! -nargs=1 Grep call s:grep_recursive(<f-args>)
" function! s:grep_recursive(pattern)
"     execute 'vimgrep /' . a:pattern . '/j ** | cw'
" endfunction

command! Grep :Unite grep
""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""
" neocomplete
"
let g:neocomplete#enable_at_startup = 1 " 起動時に有効化
" inoremap <expr><CR> pumvisible() ? neocomplete#close_popup() : "\<CR>"
inoremap <expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr><S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr><Esc> pumvisible() ? neocomplete#cancel_popup() : "\<Esc>"
""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""
" neosnippet
"
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
" if has('conceal')
  " set conceallevel=2 concealcursor=i
" endif
""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""
" neocomplete + neosnippet
"
" 補完候補選択時の<CR>の動作
imap <expr><CR> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? neocomplete#close_popup() : "\<CR>"
""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""
" vimfiler
"
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_safe_mode_by_default = 0
let g:vimfiler_ignore_pattern = []
""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""
" vimshell
"
" Use current directory as vimshell prompt.
let g:vimshell_prompt_expr = 'escape(fnamemodify(getcwd(), ":~").">", "\\[]()?! ")." "'
let g:vimshell_prompt_pattern = '^\%(\f\|\\.\)\+> '
""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""
" NERD Commenter
"
let NERDSpaceDelims = 1
nmap <Space>c <Plug>NERDCommenterToggle
vmap <Space>c <Plug>NERDCommenterToggle
""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""
" caw.vim
"
" nmap <Space>c <Plug>(caw:i:toggle)
" vmap <Space>c <Plug>(caw:i:toggle)
""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""
" unite
"
let g:unite_enable_start_insert = 1

" Unite history/yank を有効化
let g:unite_source_history_yank_enable = 1

" ファイル選択
" カレントディレクトリから再帰的に表示 + vimprocがある場合は非同期実行
function! MyUniteFileRec()
    if ! empty(neobundle#get('vimproc'))
        if isdirectory(getcwd()."/.git")
            Unite file_rec/git
        else
            Unite file_rec/async
        endif
    else
            Unite file_rec
    endif
endfunction
nnoremap <Space>o :<C-u>call MyUniteFileRec()<CR>
nnoremap <Space>g :<C-u>Unite grep<CR>
nnoremap <Space>s :<C-u>Unite source<CR>
nnoremap <Space>t :<C-u>Unite tag<CR>
" nnoremap <Space>l :<C-u>Unite outline<CR>
nnoremap <Space>b :<C-u>Unite buffer<CR>
nnoremap <Space>r :<C-u>Unite register<CR>
nnoremap <Space>m :<C-u>Unite file_mru<CR>
nnoremap <Space>y :<C-u>Unite history/yank<CR>
""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""
" unite grep
"
if executable('ag')
    " grepにag(The Silver Searcher) を使う
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts =
                \ '-i --vimgrep --hidden --ignore ' .
                \ '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
    let g:unite_source_grep_recursive_opt = ''
endif
""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""
" vim-altr
"
nmap <Space>a <Plug>(altr-forward)
""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""
" syntastic
"
" if ! empty(neobundle#get("syntastic"))
    " set statusline+=%#warningmsg#
    " set statusline+=%{SyntasticStatuslineFlag()}
    " set statusline+=%*
    " let g:syntastic_always_populate_loc_list = 1
    " let g:syntastic_auto_loc_list = 1
    " let g:syntastic_check_on_open = 0
    " let g:syntastic_check_on_wq = 0
" endif
""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""
" vim-quickrun
"
command! Run QuickRun
command! Open QuickRun open

" g:quickrun_configに設定を追加する
function! s:put_quickrun_config(type, config)
    if !exists("g:quickrun_config")
        let g:quickrun_config = {}
    endif
    let g:quickrun_config[a:type] = a:config
endfunction
""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""
" vim-watchdogs
"
let g:watchdogs_check_BufWritePost_enable = 1
let g:watchdogs_check_CursorHold_enable = 1
""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""
" C/C++
"

let g:cpp_class_scope_highlight = 1
let g:cpp_experimental_template_highlight = 1

if executable("/usr/local/bin/clang")
    let g:marching_clang_command = "/usr/local/bin/clang"
elseif executable("/usr/bin/clang")
    let g:marching_clang_command = "/usr/bin/clang"
elseif executable("/bin/clang")
    let g:marching_clang_command = "/bin/clang"
endif

let g:marching_enable_neocomplete = 1
if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.cpp =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
set updatetime=200

" インクルードパス一覧
let g:vimrc_include_paths = []
function! g:VimrcAddIncludePath(path) abort
    let full_path = escape(expand(a:path), ' ')

    " pathに追加
    call s:add_path(full_path)

    let found = 0
    for i in g:vimrc_include_paths
        if i == full_path
            let found = 1
        endif
    endfor
    if ! found
        call add(g:vimrc_include_paths, full_path)

        " -Iオプションを作成し、watchdogs_checkerのコマンド引数に追加
        let cmdopt = ''
        for i in g:vimrc_include_paths
            let cmdopt = cmdopt . '-I' . i . ' '
        endfor
        call s:put_quickrun_config("watchdogs_checker/clang",   {"cmdopt" : cmdopt})
        call s:put_quickrun_config("watchdogs_checker/clang++", {"cmdopt" : cmdopt})
        call s:put_quickrun_config("watchdogs_checker/gcc",     {"cmdopt" : cmdopt})
        call s:put_quickrun_config("watchdogs_checker/g++",     {"cmdopt" : cmdopt})
        call watchdogs#setup(g:quickrun_config)
    endif
endfunction

function! s:c_cpp() abort
    setlocal matchpairs+=<:>

    " カレントディレクトリ以下の 'include' ディレクトリを再帰的に探索し、
    " インクルードパスとして追加する (depth=5)
    let include_dirs = finddir('include', './**5', -1)
    let include_search_option = ''
    for include_dir in include_dirs
        call g:VimrcAddIncludePath(getcwd() . '/' . include_dir)
    endfor
endfunction

augroup vimrc-c-cpp
    autocmd!
    autocmd FileType c,cpp call s:c_cpp()
augroup END

""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""
" Haskell
" 

" vim2hs
let g:haskell_conceal = 0

function! s:haskell() abort
    setlocal omnifunc=necoghc#omnifunc
    " nnoremap <C-c> :<C-u>GhcModCheck<CR>
    nnoremap <C-i> :<C-u>GhcModInfo<CR>
    nnoremap <C-t> :<C-u>GhcModType<CR>
    nnoremap <C-g> :<C-u>GhcModTypeClear<CR>
    command! Hoogle :Unite hoogle
    command! HaskellImport :Unite haskellimport

    " cabal run / cabal build をQuickRunから呼び出す
    " command! CabalBuild :QuickRun cabal/build
    " command! CabalRun :QuickRun cabal/run
    " call s:put_quickrun_config("cabal/build", {
                " \       "exec" : "%c %o",
                " \       "command" : "cabal",
                " \       "cmdopt" : "build",
                " \       "outputter" : "error:buffer:quickfix",
                " \       "runner" : "vimproc",
                " \})
    " call s:put_quickrun_config("cabal/run", {
                " \       "exec" : "%c %o",
                " \       "command" : "cabal",
                " \       "cmdopt" : "run",
                " \       "outputter" : "error:buffer:quickfix",
                " \       "runner" : "vimproc",
                " \})

    " Haskell syntax checker
    call s:put_quickrun_config("haskell/watchdogs_checker", {
                \   "type"
                \       : executable("ghc-mod")     ? "watchdogs_checker/ghc-mod"
                \       : executable("hlint")       ? "watchdogs_checker/hlint"
                \       : executable("hdevtools")   ? "watchdogs_checker/hdevtools"
                \       : ""
                \   })
    call watchdogs#setup(g:quickrun_config)

    " call s:make_to_cabal_build()
    call s:make_to_stack_build()

    " haskellmode-vim
    " compiler ghc
    " let g:haddock_browser = '/Applications/Safari.app'
endfunction

" :make で呼び出すコマンドを cabal build に設定する
function! s:make_to_cabal_build()
    if glob("*.cabal") != ''
        setlocal makeprg=cabal\ build
    endif
endfunction

" :make で呼び出すコマンドを stack build に設定する
function! s:make_to_stack_build()
    if glob("stack.yaml") != ''
        setlocal makeprg=stack\ build
    endif
endfunction

augroup vimrc-haskell
    autocmd!
    autocmd FileType haskell call s:haskell()
augroup END
""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""
" Python
"
" jediでの補完時に補完候補が選択されてしまう対策
augroup vimrc-python
    autocmd!
    autocmd FileType python setlocal omnifunc=jedi#completions
augroup END
"let g:jedi#popup_select_first=0    " 効かないらしい
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0
if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
""""""""""""""""""""""""""""""""""""""""

" ディレクトリ以下の「.vimrc_local」を探し、存在する場合は適用(source)する
augroup vimrc-local
    autocmd!
    autocmd BufNewFile,BufReadPost * call s:vimrc_local(expand('<afile>:p:h'))
    autocmd BufReadPre .vimrc_local set ft=vim
augroup END
function! s:vimrc_local(loc)
    let files = findfile('.vimrc_local', escape(a:loc, ' ') . ';', -1)
    for i in reverse(filter(files, 'filereadable(v:val)'))
        source `=i`
    endfor
endfunction
