[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
  nnoremap <silent> F :<C-u>Defx -listed -resume -show-ignored-files -buffer-name=win-`win_getid()`<CR>
'''
hook_source = '''
  call defx#custom#column('mark', {
          \ 'readonly_icon': '✗',
          \ 'selected_icon': '✓',
          \ })
  call defx#custom#column('icon', {
          \ 'directory_icon': '▸',
          \ 'opened_icon': '▾',
          \ 'root_icon': ' ',
          \ })
'''
[plugins.ftplugin]
defx = '''
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>      defx#async_action('open')
  nnoremap <silent><buffer><expr> c         defx#do_action('copy')
  nnoremap <silent><buffer><expr> !         defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> m         defx#do_action('move')
  nnoremap <silent><buffer><expr> p         defx#do_action('paste')
  nnoremap <silent><buffer><expr> l         defx#async_action('open')
  nnoremap <silent><buffer><expr> E         defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P         defx#do_action('preview')
  nnoremap <silent><buffer><expr> o         defx#async_action('open_tree', ['nested', 'toggle'])
  nnoremap <silent><buffer><expr> O         defx#async_action('open_tree', 'recursive')
  nnoremap <silent><buffer><expr> K         defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N         defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M         defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C         defx#do_action('toggle_columns', 'mark:filename:type:size:time')
  nnoremap <silent><buffer><expr> S         defx#do_action('toggle_sort', 'Time')
  nnoremap <silent><buffer><expr> se        defx#do_action('add_session')
  nnoremap <silent><buffer><expr> sl        defx#do_action('load_session')
  nnoremap <silent><buffer><expr> d         defx#do_action('remove_trash')
  nnoremap <silent><buffer><expr> r         defx#do_action('rename')
  nnoremap <silent><buffer><expr> x         defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> >         defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> .         defx#do_action('repeat')
  nnoremap <silent><buffer><expr> yy        defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> h         defx#async_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~         defx#async_action('cd')
  nnoremap <silent><buffer><expr> \         defx#do_action('cd', getcwd())
  nnoremap <silent><buffer><expr> q         defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>   defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *         defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j         line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k         line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>     defx#do_action('redraw')
  xnoremap <silent><buffer><expr> <CR>      defx#do_action('toggle_select_visual')
  nnoremap <silent><buffer><expr> <C-g>     defx#do_action('print')
  nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ?
    \ ':<C-u>wincmd w<CR>' :
    \ ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
'''

[[plugins]]
repo = 'tpope/vim-endwise'
on_event = 'InsertEnter'

[[plugins]]
repo = 'kana/vim-smartinput'
on_event = 'InsertEnter'

# [[plugins]]
# repo = 'Shougo/vimshell'
# on_cmd = ['VimShell', 'VimShellCreate']
# hook_source = '''
    # let g:vimshell_prompt_expr = 'escape(fnamemodify(getcwd(), ":~").">", "\\[]()?! ")." "'
    # let g:vimshell_prompt_pattern = '^\%(\f\|\\.\)\+> '
# '''

# [[plugins]]
# repo = 'Shougo/vimfiler'
# depends = 'unite.vim'
# on_cmd = ['VimFiler', 'VimFilerCurrentDir']
# hook_source = '''
#     let g:vimfiler_as_default_explorer = 1
#     let g:vimfiler_safe_mode_by_default = 0
#     let g:vimfiler_ignore_pattern = []
# '''

##############################
# Language Server Protocol
##############################

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_source = '''
    source ~/.vim/rc/plugins/asyncomplete.vim
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = 'asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
depends = 'async.vim'
hook_source = '''
    source ~/.vim/rc/plugins/vim-lsp.vim
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = 'vim-lsp'

[[plugins]]
repo = 'mattn/vim-lsp-icons'
depends = 'vim-lsp'


##############################
# neocomplete / deoplete
##############################

# repo = 'Shougo/neocomplete.vim'
# if = 'has("lua")'
# on_event = 'InsertEnter'
# hook_source = '''
    # let g:deoplete#enable_at_startup = 1
# '''

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# if = 'has("nvim")'
# on_event = 'InsertEnter'
# hook_source = '''
#     source ~/.vim/rc/plugins/deoplete.vim
# '''
# 
# [[plugins]]
# repo = 'lighttiger2505/deoplete-vim-lsp'
# if = 'has("nvim")'
# on_event = 'InsertEnter'
# depends = 'deoplete.nvim'

# [[plugins]]
# repo = 'Shougo/neosnippet'
# on_event = 'InsertEnter'
# hook_source = '''
    # imap <C-k> <Plug>(neosnippet_expand_or_jump)
    # smap <C-k> <Plug>(neosnippet_expand_or_jump)
    # xmap <C-k> <Plug>(neosnippet_expand_target)
    # let g:neosnippet#enable_snipmate_compatibility = 1
    # let g:neosnippet#enable_completed_snippet = 1
    # let g:neosnippet#expand_word_boundary = 1
# '''

# [[plugins]]
# repo = 'SirVer/ultisnips'
# on_event = 'InsertEnter'

##############################
# Previewing document
##############################

[[plugins]]
repo = 'kannokanno/previm'
# on_ft = ['markdown', 'rst']
on_cmd = 'PrevimOpen'
hook_source = '''
    let g:previm_open_cmd = 'open -a Safari'
    command! Preview :PrevimOpen
'''


##############################
# Markdown
##############################

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
hook_source = '''
    let g:vim_markdown_folding_disabled = 1
'''


##############################
# C++
##############################

# [[plugins]]
# repo = 'vim-jp/vim-cpp'
# on_ft = 'cpp'

# [[plugins]]
# repo = 'octol/vim-cpp-enhanced-highlight'
# on_ft = 'cpp'

# [[plugins]]
# repo = 'osyo-manga/vim-marching'
# on_ft = ['c', 'cpp']
# on_event = 'InsertEnter'


##############################
# C#
##############################

# [[plugins]]
# repo = 'OmniSharp/omnisharp-vim'
# on_ft = 'cs'
# build = 'xbuild server/OmniSharp.sln'

##############################
# haskell
##############################

# [[plugins]]
# repo = 'dag/vim2hs'
# on_ft = 'haskell'

# [[plugins]]
# repo = 'kana/vim-filetype-haskell'
# on_ft = 'haskell'

# [[plugins]]
# repo = 'itchyny/vim-haskell-indent'
# on_ft = 'haskell'

# [[plugins]]
# repo = 'ujihisa/unite-haskellimport'
# on_ft = 'haskell'

# [[plugins]]
# repo = 'eagletmt/neco-ghc'
# on_ft = 'haskell'
# on_event = 'InsertEnter'

# [[plugins]]
# repo = 'eagletmt/ghcmod-vim'
# on_ft = 'haskell'

##############################
# swift
##############################

[[plugins]]
repo = 'apple/swift'
rtp = 'utils/vim'
on_ft = 'swift'

# [[plugins]]
# repo = 'keith/swift.vim'
# on_ft = 'swift'

# [[plugins]]
# repo = 'kballard/vim-swift'
# on_ft = 'swift'

# [[plugins]]
# repo = 'landaire/deoplete-swift'
# on_ft = 'swift'
# on_event = 'InsertEnter'

# [[plugins]]
# repo = 'mitsuse/autocomplete-swift'
# on_ft = 'swift'
# on_event = 'InsertEnter'

##############################
# javascript
##############################

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = 'javascript'

# [[plugins]]
# repo = 'ternjs/tern_for_vim'
# on_ft = 'javascript'
# on_event = 'InsertEnter'
# build = 'npm install'

# [[plugins]]
# repo = 'nicklasos/vim-jsx-riot'
# on_ft = 'javascript'

# [[plugins]]
# repo = 'carlitux/deoplete-ternjs'
# on_ft = 'javascript'
# on_event = 'InsertEnter'
# build = 'npm install -g tern'
# hook_source = '''
    # let g:tern_request_timeout = 1
    # let g:tern_show_signature_in_pum = '0'
# '''

# Vue.js
[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'

##############################
# Typescript
##############################

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'
hook_source = '''
    let g:typescript_compiler_binary = 'tsc'
    let g:typescript_compiler_options = ''
    autocmd FileType typescript :set makeprg=tsc
    autocmd QuickFixCmdPost [^l]* nested cwindow
    autocmd QuickFixCmdPost    l* nested lwindow
'''

# [[plugins]]
# repo = 'magarcia/vim-angular2-snippets'
# on_ft = 'typescript'


##############################
# python
##############################

# [[plugins]]
# repo = 'davidhalter/jedi-vim'
# on_ft = ['python', 'python3']
# on_event = 'InsertEnter'

# [[plugins]]
# repo = 'lambdalisue/vim-pyenv'
# on_ft = ['python', 'python3']
# depends = 'jedi-vim'

# [[plugins]]
# repo = 'zchee/deoplete-jedi'
# on_ft = ['python', 'python3']
# on_event = 'InsertEnter'


##############################
# Ruby
##############################

# [[plugins]]
# repo = 'vim-ruby/vim-ruby'
# on_ft = 'ruby'

# [[plugins]]
# repo = 'tpope/vim-rails'
# on_ft = 'ruby'

# [[plugins]]
# repo = 'Shougo/deoplete-rct'
# on_ft = 'ruby'
# on_event = 'InsertEnter'


##############################
# golang
##############################

# [[plugins]]
# repo = 'fatih/vim-go'
# on_ft = 'go'
# hook_post_source = '''
    # GoInstallBinaries
# '''

# [[plugins]]
# repo = 'zchee/deoplete-go'
# build = 'make'
# on_ft = 'go'
# depends = ['deoplete.nvim']
# hook_source = '''
    # let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
# '''


##############################
# PowerShell
##############################

# [[plugins]]
# repo = 'PProvost/vim-ps1'
# on_ft = "ps1"


##############################
# TOML
##############################
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'


##############################
# TOML
##############################
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = 'plantuml'

[[plugins]]
repo = 'weirongxu/plantuml-previewer.vim'
on_ft = 'plantuml'
